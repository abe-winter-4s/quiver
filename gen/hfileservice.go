// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package gen

import (
	"bytes"
	"fmt"

	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type HFileService interface {
	// Parameters:
	//  - Req
	GetValuesSingle(req *SingleHFileKeyRequest) (r *SingleHFileKeyResponse, err error)
	// Parameters:
	//  - Req
	GetValuesMulti(req *SingleHFileKeyRequest) (r *MultiHFileKeyResponse, err error)
	// Parameters:
	//  - Req
	GetValuesForPrefixes(req *PrefixRequest) (r *PrefixResponse, err error)
	// Parameters:
	//  - Req
	GetValuesMultiSplitKeys(req *MultiHFileSplitKeyRequest) (r *KeyToValuesResponse, err error)
	// Parameters:
	//  - Req
	GetIterator(req *IteratorRequest) (r *IteratorResponse, err error)
	// Parameters:
	//  - Req
	GetInfo(req *InfoRequest) (r []*HFileInfo, err error)
	// Parameters:
	//  - WaitInMillis
	TestTimeout(waitInMillis int32) (r int32, err error)
}

type HFileServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewHFileServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *HFileServiceClient {
	return &HFileServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewHFileServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *HFileServiceClient {
	return &HFileServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - Req
func (p *HFileServiceClient) GetValuesSingle(req *SingleHFileKeyRequest) (r *SingleHFileKeyResponse, err error) {
	if err = p.sendGetValuesSingle(req); err != nil {
		return
	}
	return p.recvGetValuesSingle()
}

func (p *HFileServiceClient) sendGetValuesSingle(req *SingleHFileKeyRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getValuesSingle", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetValuesSingleArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *HFileServiceClient) recvGetValuesSingle() (value *SingleHFileKeyResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error19 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error20 error
		error20, err = error19.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error20
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getValuesSingle failed: out of sequence response")
		return
	}
	result := GetValuesSingleResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex != nil {
		err = result.Ex
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *HFileServiceClient) GetValuesMulti(req *SingleHFileKeyRequest) (r *MultiHFileKeyResponse, err error) {
	if err = p.sendGetValuesMulti(req); err != nil {
		return
	}
	return p.recvGetValuesMulti()
}

func (p *HFileServiceClient) sendGetValuesMulti(req *SingleHFileKeyRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getValuesMulti", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetValuesMultiArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *HFileServiceClient) recvGetValuesMulti() (value *MultiHFileKeyResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error21 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error22 error
		error22, err = error21.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error22
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getValuesMulti failed: out of sequence response")
		return
	}
	result := GetValuesMultiResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex != nil {
		err = result.Ex
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *HFileServiceClient) GetValuesForPrefixes(req *PrefixRequest) (r *PrefixResponse, err error) {
	if err = p.sendGetValuesForPrefixes(req); err != nil {
		return
	}
	return p.recvGetValuesForPrefixes()
}

func (p *HFileServiceClient) sendGetValuesForPrefixes(req *PrefixRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getValuesForPrefixes", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetValuesForPrefixesArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *HFileServiceClient) recvGetValuesForPrefixes() (value *PrefixResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error23 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error24 error
		error24, err = error23.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error24
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getValuesForPrefixes failed: out of sequence response")
		return
	}
	result := GetValuesForPrefixesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex != nil {
		err = result.Ex
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *HFileServiceClient) GetValuesMultiSplitKeys(req *MultiHFileSplitKeyRequest) (r *KeyToValuesResponse, err error) {
	if err = p.sendGetValuesMultiSplitKeys(req); err != nil {
		return
	}
	return p.recvGetValuesMultiSplitKeys()
}

func (p *HFileServiceClient) sendGetValuesMultiSplitKeys(req *MultiHFileSplitKeyRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getValuesMultiSplitKeys", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetValuesMultiSplitKeysArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *HFileServiceClient) recvGetValuesMultiSplitKeys() (value *KeyToValuesResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error25 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error26 error
		error26, err = error25.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error26
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getValuesMultiSplitKeys failed: out of sequence response")
		return
	}
	result := GetValuesMultiSplitKeysResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex != nil {
		err = result.Ex
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *HFileServiceClient) GetIterator(req *IteratorRequest) (r *IteratorResponse, err error) {
	if err = p.sendGetIterator(req); err != nil {
		return
	}
	return p.recvGetIterator()
}

func (p *HFileServiceClient) sendGetIterator(req *IteratorRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getIterator", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetIteratorArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *HFileServiceClient) recvGetIterator() (value *IteratorResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error27 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error28 error
		error28, err = error27.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error28
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getIterator failed: out of sequence response")
		return
	}
	result := GetIteratorResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex != nil {
		err = result.Ex
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *HFileServiceClient) GetInfo(req *InfoRequest) (r []*HFileInfo, err error) {
	if err = p.sendGetInfo(req); err != nil {
		return
	}
	return p.recvGetInfo()
}

func (p *HFileServiceClient) sendGetInfo(req *InfoRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getInfo", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetInfoArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *HFileServiceClient) recvGetInfo() (value []*HFileInfo, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error29 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error30 error
		error30, err = error29.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error30
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getInfo failed: out of sequence response")
		return
	}
	result := GetInfoResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex != nil {
		err = result.Ex
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - WaitInMillis
func (p *HFileServiceClient) TestTimeout(waitInMillis int32) (r int32, err error) {
	if err = p.sendTestTimeout(waitInMillis); err != nil {
		return
	}
	return p.recvTestTimeout()
}

func (p *HFileServiceClient) sendTestTimeout(waitInMillis int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("testTimeout", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TestTimeoutArgs{
		WaitInMillis: waitInMillis,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *HFileServiceClient) recvTestTimeout() (value int32, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error31 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error32 error
		error32, err = error31.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error32
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "testTimeout failed: out of sequence response")
		return
	}
	result := TestTimeoutResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

type HFileServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      HFileService
}

func (p *HFileServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *HFileServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *HFileServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewHFileServiceProcessor(handler HFileService) *HFileServiceProcessor {

	self33 := &HFileServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self33.processorMap["getValuesSingle"] = &hFileServiceProcessorGetValuesSingle{handler: handler}
	self33.processorMap["getValuesMulti"] = &hFileServiceProcessorGetValuesMulti{handler: handler}
	self33.processorMap["getValuesForPrefixes"] = &hFileServiceProcessorGetValuesForPrefixes{handler: handler}
	self33.processorMap["getValuesMultiSplitKeys"] = &hFileServiceProcessorGetValuesMultiSplitKeys{handler: handler}
	self33.processorMap["getIterator"] = &hFileServiceProcessorGetIterator{handler: handler}
	self33.processorMap["getInfo"] = &hFileServiceProcessorGetInfo{handler: handler}
	self33.processorMap["testTimeout"] = &hFileServiceProcessorTestTimeout{handler: handler}
	return self33
}

func (p *HFileServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x34 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x34.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x34

}

type hFileServiceProcessorGetValuesSingle struct {
	handler HFileService
}

func (p *hFileServiceProcessorGetValuesSingle) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetValuesSingleArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getValuesSingle", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetValuesSingleResult{}
	var retval *SingleHFileKeyResponse
	var err2 error
	if retval, err2 = p.handler.GetValuesSingle(args.Req); err2 != nil {
		switch v := err2.(type) {
		case *HFileServiceException:
			result.Ex = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getValuesSingle: "+err2.Error())
			oprot.WriteMessageBegin("getValuesSingle", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getValuesSingle", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hFileServiceProcessorGetValuesMulti struct {
	handler HFileService
}

func (p *hFileServiceProcessorGetValuesMulti) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetValuesMultiArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getValuesMulti", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetValuesMultiResult{}
	var retval *MultiHFileKeyResponse
	var err2 error
	if retval, err2 = p.handler.GetValuesMulti(args.Req); err2 != nil {
		switch v := err2.(type) {
		case *HFileServiceException:
			result.Ex = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getValuesMulti: "+err2.Error())
			oprot.WriteMessageBegin("getValuesMulti", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getValuesMulti", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hFileServiceProcessorGetValuesForPrefixes struct {
	handler HFileService
}

func (p *hFileServiceProcessorGetValuesForPrefixes) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetValuesForPrefixesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getValuesForPrefixes", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetValuesForPrefixesResult{}
	var retval *PrefixResponse
	var err2 error
	if retval, err2 = p.handler.GetValuesForPrefixes(args.Req); err2 != nil {
		switch v := err2.(type) {
		case *HFileServiceException:
			result.Ex = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getValuesForPrefixes: "+err2.Error())
			oprot.WriteMessageBegin("getValuesForPrefixes", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getValuesForPrefixes", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hFileServiceProcessorGetValuesMultiSplitKeys struct {
	handler HFileService
}

func (p *hFileServiceProcessorGetValuesMultiSplitKeys) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetValuesMultiSplitKeysArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getValuesMultiSplitKeys", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetValuesMultiSplitKeysResult{}
	var retval *KeyToValuesResponse
	var err2 error
	if retval, err2 = p.handler.GetValuesMultiSplitKeys(args.Req); err2 != nil {
		switch v := err2.(type) {
		case *HFileServiceException:
			result.Ex = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getValuesMultiSplitKeys: "+err2.Error())
			oprot.WriteMessageBegin("getValuesMultiSplitKeys", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getValuesMultiSplitKeys", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hFileServiceProcessorGetIterator struct {
	handler HFileService
}

func (p *hFileServiceProcessorGetIterator) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetIteratorArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getIterator", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetIteratorResult{}
	var retval *IteratorResponse
	var err2 error
	if retval, err2 = p.handler.GetIterator(args.Req); err2 != nil {
		switch v := err2.(type) {
		case *HFileServiceException:
			result.Ex = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getIterator: "+err2.Error())
			oprot.WriteMessageBegin("getIterator", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getIterator", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hFileServiceProcessorGetInfo struct {
	handler HFileService
}

func (p *hFileServiceProcessorGetInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetInfoResult{}
	var retval []*HFileInfo
	var err2 error
	if retval, err2 = p.handler.GetInfo(args.Req); err2 != nil {
		switch v := err2.(type) {
		case *HFileServiceException:
			result.Ex = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getInfo: "+err2.Error())
			oprot.WriteMessageBegin("getInfo", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hFileServiceProcessorTestTimeout struct {
	handler HFileService
}

func (p *hFileServiceProcessorTestTimeout) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TestTimeoutArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("testTimeout", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TestTimeoutResult{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.TestTimeout(args.WaitInMillis); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing testTimeout: "+err2.Error())
		oprot.WriteMessageBegin("testTimeout", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("testTimeout", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

type GetValuesSingleArgs struct {
	Req *SingleHFileKeyRequest `thrift:"req,1" json:"req"`
}

func NewGetValuesSingleArgs() *GetValuesSingleArgs {
	return &GetValuesSingleArgs{}
}

var GetValuesSingleArgs_Req_DEFAULT *SingleHFileKeyRequest

func (p *GetValuesSingleArgs) GetReq() *SingleHFileKeyRequest {
	if !p.IsSetReq() {
		return GetValuesSingleArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *GetValuesSingleArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetValuesSingleArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetValuesSingleArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &SingleHFileKeyRequest{}
	if err := p.Req.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Req, err)
	}
	return nil
}

func (p *GetValuesSingleArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getValuesSingle_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetValuesSingleArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:req: %s", p, err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Req, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:req: %s", p, err)
	}
	return err
}

func (p *GetValuesSingleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetValuesSingleArgs(%+v)", *p)
}

type GetValuesSingleResult struct {
	Success *SingleHFileKeyResponse `thrift:"success,0" json:"success"`
	Ex      *HFileServiceException  `thrift:"ex,1" json:"ex"`
}

func NewGetValuesSingleResult() *GetValuesSingleResult {
	return &GetValuesSingleResult{}
}

var GetValuesSingleResult_Success_DEFAULT *SingleHFileKeyResponse

func (p *GetValuesSingleResult) GetSuccess() *SingleHFileKeyResponse {
	if !p.IsSetSuccess() {
		return GetValuesSingleResult_Success_DEFAULT
	}
	return p.Success
}

var GetValuesSingleResult_Ex_DEFAULT *HFileServiceException

func (p *GetValuesSingleResult) GetEx() *HFileServiceException {
	if !p.IsSetEx() {
		return GetValuesSingleResult_Ex_DEFAULT
	}
	return p.Ex
}
func (p *GetValuesSingleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetValuesSingleResult) IsSetEx() bool {
	return p.Ex != nil
}

func (p *GetValuesSingleResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetValuesSingleResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &SingleHFileKeyResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetValuesSingleResult) ReadField1(iprot thrift.TProtocol) error {
	p.Ex = &HFileServiceException{}
	if err := p.Ex.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Ex, err)
	}
	return nil
}

func (p *GetValuesSingleResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getValuesSingle_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetValuesSingleResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetValuesSingleResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx() {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:ex: %s", p, err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Ex, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:ex: %s", p, err)
		}
	}
	return err
}

func (p *GetValuesSingleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetValuesSingleResult(%+v)", *p)
}

type GetValuesMultiArgs struct {
	Req *SingleHFileKeyRequest `thrift:"req,1" json:"req"`
}

func NewGetValuesMultiArgs() *GetValuesMultiArgs {
	return &GetValuesMultiArgs{}
}

var GetValuesMultiArgs_Req_DEFAULT *SingleHFileKeyRequest

func (p *GetValuesMultiArgs) GetReq() *SingleHFileKeyRequest {
	if !p.IsSetReq() {
		return GetValuesMultiArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *GetValuesMultiArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetValuesMultiArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetValuesMultiArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &SingleHFileKeyRequest{}
	if err := p.Req.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Req, err)
	}
	return nil
}

func (p *GetValuesMultiArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getValuesMulti_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetValuesMultiArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:req: %s", p, err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Req, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:req: %s", p, err)
	}
	return err
}

func (p *GetValuesMultiArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetValuesMultiArgs(%+v)", *p)
}

type GetValuesMultiResult struct {
	Success *MultiHFileKeyResponse `thrift:"success,0" json:"success"`
	Ex      *HFileServiceException `thrift:"ex,1" json:"ex"`
}

func NewGetValuesMultiResult() *GetValuesMultiResult {
	return &GetValuesMultiResult{}
}

var GetValuesMultiResult_Success_DEFAULT *MultiHFileKeyResponse

func (p *GetValuesMultiResult) GetSuccess() *MultiHFileKeyResponse {
	if !p.IsSetSuccess() {
		return GetValuesMultiResult_Success_DEFAULT
	}
	return p.Success
}

var GetValuesMultiResult_Ex_DEFAULT *HFileServiceException

func (p *GetValuesMultiResult) GetEx() *HFileServiceException {
	if !p.IsSetEx() {
		return GetValuesMultiResult_Ex_DEFAULT
	}
	return p.Ex
}
func (p *GetValuesMultiResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetValuesMultiResult) IsSetEx() bool {
	return p.Ex != nil
}

func (p *GetValuesMultiResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetValuesMultiResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &MultiHFileKeyResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetValuesMultiResult) ReadField1(iprot thrift.TProtocol) error {
	p.Ex = &HFileServiceException{}
	if err := p.Ex.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Ex, err)
	}
	return nil
}

func (p *GetValuesMultiResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getValuesMulti_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetValuesMultiResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetValuesMultiResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx() {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:ex: %s", p, err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Ex, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:ex: %s", p, err)
		}
	}
	return err
}

func (p *GetValuesMultiResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetValuesMultiResult(%+v)", *p)
}

type GetValuesForPrefixesArgs struct {
	Req *PrefixRequest `thrift:"req,1" json:"req"`
}

func NewGetValuesForPrefixesArgs() *GetValuesForPrefixesArgs {
	return &GetValuesForPrefixesArgs{}
}

var GetValuesForPrefixesArgs_Req_DEFAULT *PrefixRequest

func (p *GetValuesForPrefixesArgs) GetReq() *PrefixRequest {
	if !p.IsSetReq() {
		return GetValuesForPrefixesArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *GetValuesForPrefixesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetValuesForPrefixesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetValuesForPrefixesArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &PrefixRequest{}
	if err := p.Req.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Req, err)
	}
	return nil
}

func (p *GetValuesForPrefixesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getValuesForPrefixes_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetValuesForPrefixesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:req: %s", p, err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Req, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:req: %s", p, err)
	}
	return err
}

func (p *GetValuesForPrefixesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetValuesForPrefixesArgs(%+v)", *p)
}

type GetValuesForPrefixesResult struct {
	Success *PrefixResponse        `thrift:"success,0" json:"success"`
	Ex      *HFileServiceException `thrift:"ex,1" json:"ex"`
}

func NewGetValuesForPrefixesResult() *GetValuesForPrefixesResult {
	return &GetValuesForPrefixesResult{}
}

var GetValuesForPrefixesResult_Success_DEFAULT *PrefixResponse

func (p *GetValuesForPrefixesResult) GetSuccess() *PrefixResponse {
	if !p.IsSetSuccess() {
		return GetValuesForPrefixesResult_Success_DEFAULT
	}
	return p.Success
}

var GetValuesForPrefixesResult_Ex_DEFAULT *HFileServiceException

func (p *GetValuesForPrefixesResult) GetEx() *HFileServiceException {
	if !p.IsSetEx() {
		return GetValuesForPrefixesResult_Ex_DEFAULT
	}
	return p.Ex
}
func (p *GetValuesForPrefixesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetValuesForPrefixesResult) IsSetEx() bool {
	return p.Ex != nil
}

func (p *GetValuesForPrefixesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetValuesForPrefixesResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &PrefixResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetValuesForPrefixesResult) ReadField1(iprot thrift.TProtocol) error {
	p.Ex = &HFileServiceException{}
	if err := p.Ex.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Ex, err)
	}
	return nil
}

func (p *GetValuesForPrefixesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getValuesForPrefixes_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetValuesForPrefixesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetValuesForPrefixesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx() {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:ex: %s", p, err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Ex, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:ex: %s", p, err)
		}
	}
	return err
}

func (p *GetValuesForPrefixesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetValuesForPrefixesResult(%+v)", *p)
}

type GetValuesMultiSplitKeysArgs struct {
	Req *MultiHFileSplitKeyRequest `thrift:"req,1" json:"req"`
}

func NewGetValuesMultiSplitKeysArgs() *GetValuesMultiSplitKeysArgs {
	return &GetValuesMultiSplitKeysArgs{}
}

var GetValuesMultiSplitKeysArgs_Req_DEFAULT *MultiHFileSplitKeyRequest

func (p *GetValuesMultiSplitKeysArgs) GetReq() *MultiHFileSplitKeyRequest {
	if !p.IsSetReq() {
		return GetValuesMultiSplitKeysArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *GetValuesMultiSplitKeysArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetValuesMultiSplitKeysArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetValuesMultiSplitKeysArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &MultiHFileSplitKeyRequest{}
	if err := p.Req.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Req, err)
	}
	return nil
}

func (p *GetValuesMultiSplitKeysArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getValuesMultiSplitKeys_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetValuesMultiSplitKeysArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:req: %s", p, err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Req, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:req: %s", p, err)
	}
	return err
}

func (p *GetValuesMultiSplitKeysArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetValuesMultiSplitKeysArgs(%+v)", *p)
}

type GetValuesMultiSplitKeysResult struct {
	Success *KeyToValuesResponse   `thrift:"success,0" json:"success"`
	Ex      *HFileServiceException `thrift:"ex,1" json:"ex"`
}

func NewGetValuesMultiSplitKeysResult() *GetValuesMultiSplitKeysResult {
	return &GetValuesMultiSplitKeysResult{}
}

var GetValuesMultiSplitKeysResult_Success_DEFAULT *KeyToValuesResponse

func (p *GetValuesMultiSplitKeysResult) GetSuccess() *KeyToValuesResponse {
	if !p.IsSetSuccess() {
		return GetValuesMultiSplitKeysResult_Success_DEFAULT
	}
	return p.Success
}

var GetValuesMultiSplitKeysResult_Ex_DEFAULT *HFileServiceException

func (p *GetValuesMultiSplitKeysResult) GetEx() *HFileServiceException {
	if !p.IsSetEx() {
		return GetValuesMultiSplitKeysResult_Ex_DEFAULT
	}
	return p.Ex
}
func (p *GetValuesMultiSplitKeysResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetValuesMultiSplitKeysResult) IsSetEx() bool {
	return p.Ex != nil
}

func (p *GetValuesMultiSplitKeysResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetValuesMultiSplitKeysResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &KeyToValuesResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetValuesMultiSplitKeysResult) ReadField1(iprot thrift.TProtocol) error {
	p.Ex = &HFileServiceException{}
	if err := p.Ex.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Ex, err)
	}
	return nil
}

func (p *GetValuesMultiSplitKeysResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getValuesMultiSplitKeys_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetValuesMultiSplitKeysResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetValuesMultiSplitKeysResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx() {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:ex: %s", p, err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Ex, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:ex: %s", p, err)
		}
	}
	return err
}

func (p *GetValuesMultiSplitKeysResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetValuesMultiSplitKeysResult(%+v)", *p)
}

type GetIteratorArgs struct {
	Req *IteratorRequest `thrift:"req,1" json:"req"`
}

func NewGetIteratorArgs() *GetIteratorArgs {
	return &GetIteratorArgs{}
}

var GetIteratorArgs_Req_DEFAULT *IteratorRequest

func (p *GetIteratorArgs) GetReq() *IteratorRequest {
	if !p.IsSetReq() {
		return GetIteratorArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *GetIteratorArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetIteratorArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetIteratorArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &IteratorRequest{}
	if err := p.Req.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Req, err)
	}
	return nil
}

func (p *GetIteratorArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getIterator_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetIteratorArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:req: %s", p, err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Req, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:req: %s", p, err)
	}
	return err
}

func (p *GetIteratorArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetIteratorArgs(%+v)", *p)
}

type GetIteratorResult struct {
	Success *IteratorResponse      `thrift:"success,0" json:"success"`
	Ex      *HFileServiceException `thrift:"ex,1" json:"ex"`
}

func NewGetIteratorResult() *GetIteratorResult {
	return &GetIteratorResult{}
}

var GetIteratorResult_Success_DEFAULT *IteratorResponse

func (p *GetIteratorResult) GetSuccess() *IteratorResponse {
	if !p.IsSetSuccess() {
		return GetIteratorResult_Success_DEFAULT
	}
	return p.Success
}

var GetIteratorResult_Ex_DEFAULT *HFileServiceException

func (p *GetIteratorResult) GetEx() *HFileServiceException {
	if !p.IsSetEx() {
		return GetIteratorResult_Ex_DEFAULT
	}
	return p.Ex
}
func (p *GetIteratorResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetIteratorResult) IsSetEx() bool {
	return p.Ex != nil
}

func (p *GetIteratorResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetIteratorResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &IteratorResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetIteratorResult) ReadField1(iprot thrift.TProtocol) error {
	p.Ex = &HFileServiceException{}
	if err := p.Ex.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Ex, err)
	}
	return nil
}

func (p *GetIteratorResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getIterator_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetIteratorResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetIteratorResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx() {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:ex: %s", p, err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Ex, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:ex: %s", p, err)
		}
	}
	return err
}

func (p *GetIteratorResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetIteratorResult(%+v)", *p)
}

type GetInfoArgs struct {
	Req *InfoRequest `thrift:"req,1" json:"req"`
}

func NewGetInfoArgs() *GetInfoArgs {
	return &GetInfoArgs{}
}

var GetInfoArgs_Req_DEFAULT *InfoRequest

func (p *GetInfoArgs) GetReq() *InfoRequest {
	if !p.IsSetReq() {
		return GetInfoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *GetInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetInfoArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &InfoRequest{}
	if err := p.Req.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Req, err)
	}
	return nil
}

func (p *GetInfoArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getInfo_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:req: %s", p, err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Req, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:req: %s", p, err)
	}
	return err
}

func (p *GetInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetInfoArgs(%+v)", *p)
}

type GetInfoResult struct {
	Success []*HFileInfo           `thrift:"success,0" json:"success"`
	Ex      *HFileServiceException `thrift:"ex,1" json:"ex"`
}

func NewGetInfoResult() *GetInfoResult {
	return &GetInfoResult{}
}

var GetInfoResult_Success_DEFAULT []*HFileInfo

func (p *GetInfoResult) GetSuccess() []*HFileInfo {
	return p.Success
}

var GetInfoResult_Ex_DEFAULT *HFileServiceException

func (p *GetInfoResult) GetEx() *HFileServiceException {
	if !p.IsSetEx() {
		return GetInfoResult_Ex_DEFAULT
	}
	return p.Ex
}
func (p *GetInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetInfoResult) IsSetEx() bool {
	return p.Ex != nil
}

func (p *GetInfoResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetInfoResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*HFileInfo, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem35 := &HFileInfo{}
		if err := _elem35.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem35, err)
		}
		p.Success = append(p.Success, _elem35)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetInfoResult) ReadField1(iprot thrift.TProtocol) error {
	p.Ex = &HFileServiceException{}
	if err := p.Ex.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Ex, err)
	}
	return nil
}

func (p *GetInfoResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getInfo_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetInfoResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx() {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:ex: %s", p, err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Ex, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:ex: %s", p, err)
		}
	}
	return err
}

func (p *GetInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetInfoResult(%+v)", *p)
}

type TestTimeoutArgs struct {
	WaitInMillis int32 `thrift:"waitInMillis,1" json:"waitInMillis"`
}

func NewTestTimeoutArgs() *TestTimeoutArgs {
	return &TestTimeoutArgs{}
}

func (p *TestTimeoutArgs) GetWaitInMillis() int32 {
	return p.WaitInMillis
}
func (p *TestTimeoutArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TestTimeoutArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.WaitInMillis = v
	}
	return nil
}

func (p *TestTimeoutArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testTimeout_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TestTimeoutArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("waitInMillis", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:waitInMillis: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.WaitInMillis)); err != nil {
		return fmt.Errorf("%T.waitInMillis (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:waitInMillis: %s", p, err)
	}
	return err
}

func (p *TestTimeoutArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestTimeoutArgs(%+v)", *p)
}

type TestTimeoutResult struct {
	Success *int32 `thrift:"success,0" json:"success"`
}

func NewTestTimeoutResult() *TestTimeoutResult {
	return &TestTimeoutResult{}
}

var TestTimeoutResult_Success_DEFAULT int32

func (p *TestTimeoutResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return TestTimeoutResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *TestTimeoutResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestTimeoutResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TestTimeoutResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *TestTimeoutResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testTimeout_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TestTimeoutResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *TestTimeoutResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestTimeoutResult(%+v)", *p)
}
